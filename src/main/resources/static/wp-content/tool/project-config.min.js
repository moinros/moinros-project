/**
 * 自定义的全局_$Config对象,主要用于设置一些公共属性、方法、等
 *
 * 调用方式为 : $C. (防止与jQuery冲突)
 *
 */

(function(w, d) {

    var regStr = /(^\s*)|(\s*$)/g;
    // 匹配以#开头的字符串
    var regId = /^#[A-Za-z_-]+$/;
    var regCName = /^\.[A-Za-z_-]+$/;

    const _$Config = function(selector) {
        new _$Config.fn.init(selector);
        // 去掉字符串左右空格
        selector = selector.replace(regStr, '');
        if (regId.test(selector)) {
            return d.getElementById(selector.substring(1, selector.length));
        } else if (regCName.test(selector)) {
            return d.getElementsByClassName(selector.substring(1,
                selector.length));
        } else {
            return d.getElementsByTagName(selector);
        }
        return null;
    };

    _$Config.fn = _$Config.prototype = {
        init: function(selector) {
            return _$Config;
        }
    };

    /**
     * 定义了一些常用的正则表达式
     */
    _$Config.regex = {
        // 匹配任意非空白字符,并且不能是纯数字,不能由任意单个重复字符组成;
        nickname: /^(?!(.)\1+$)(?!\d+$)[^\s]+$/,
        // 匹配邮箱的正则表达式
        email: /^([a-zA-Z]|[0-9])(\w|\-)+@[a-zA-Z0-9]+\.([a-zA-Z]{2,4})$/,
        // 匹配密码的正则表达式
        password: /^(?!(.)\1+$)(?!\d+$)[^\s]+$/,
        // 匹配验证码的正则表达式
        checkcode: /^[0-9a-zA-Z]*$/,
        // 匹配空格的正则表达式
        blank: /[, ]/g,
        // 匹配任意连续的重复字符
        repeated: /^(.)\1+$/,
        // 匹配纯数字
        number: /^\d+$/,
    };

    /**
     * 按下'回车键'后执行指定方法
     */
    _$Config.pressEnter = function(fn) {
        document.onkeydown = function(ev) {
            if (ev.key == 'Enter') {
                fn();
            }
        }
    }

    /**
     * 添加自定义方法、函数、对象等
     */
    _$Config.addObject = function(k, v) {
        _$Config[k] = v;
    };

    /**
     * 定义了一些常用的方法
     */
    _$Config.fns = {

        /**
         * 添加自定义函数到_$Config.fns中
         */
        add: function(k, v) {
            _$Config.fns[k] = v;
        },

        /**
         * 判断参数是否为function
         */
        isFunction: function(fn) {
            if (fn == undefined || fn == null) {
                return false;
            }
            return Object.prototype.toString.call(fn) === '[object Function]';
        },

        /**
         * 邮件的正则匹配
         */
        isEmail: function(mail) {
            if (_$Config.regex.email.test(mail)) {
                return true;
            } else {
                return false;
            }
        },
        /**
         * 定时器
         *
         * @param m
         *            [method(i)]指定执行的方法,(方法参数为index)
         * @param i
         *            [index]指定以秒为单位执行此方法
         */
        timer: function(m, i) {
            m(i);
            i--;
            if (i >= 0) {
                setTimeout(function() {
                    _$Config.fns.timer(m, i);
                }, 1000);
            } else {
                m(i);
            }
        },
        /**
         * 循环计时器
         */
        loopTimer: function(m, i) {
            m();
            setTimeout(function() {
                _$Config.fns.loopTimer(m, i);
            }, i);
        },

        /**
         * 设置提示信息
         *
         * @param e
         *            需要设置的对象
         * @param a
         *            提示选择器ID
         * @param c
         *            提示内容
         * @param f
         *            提示颜色
         */
        setTips: function(e, a, c, f) {
            if (f) {
                e.className = 'tips tips-success';
                e.setAttribute(a, c);
            } else {
                e.className = 'tips tips-error';
                e.setAttribute(a, c);
            }

        },

        /**
         * 清除空格
         */
        clearBlank: function(e) {
            if (e == undefined || e == null || e.type == 'input') {
                e = this;
            }
            var v = e.value;
            if (v == undefined || v == null) {
                return false;
            }
            if (v.indexOf(' ') >= 0) {
                e.value = v.replace(/\s/g, '');
                return false;
            } else {
                return true;
            }
        },

        /**
         * 验证空值
         *
         * @Param e
         *            [Element]HTML DOM对象
         * @Param c
         *            [Callback]回调函数
         */
        paramIsNull: function(e, c) {
            var f = false;
            if (e == undefined || e == null) {
                return f;
            }
            var v = e.value;
            if (v != undefined && v != null && v != '') {
                f = true;
            }
            if (c != undefined && c != null && _$Config.fns.isFunction(c)) {
                c(e, f);
            }
            return f;
        },
        valueIsNull: function(v) {
            if (v == undefined || v == null || v == '') {
                return false;
            }
            v = v.replace(/\s/g, '');
            if (v == '') {
                return false;
            }
            return true;
        },

        /**
         * 获取表单提交的数据
         *
         * @Param form
         *            表单DOM对象
         * @Return obj{}
         */
        getParameter: function(form) {
            var item = form.getElementsByTagName('input');
            var obj = {};
            for (var i = 0; i < item.length; i++) {
                if (item[i].type == "text" || item[i].type == "password"
                    || item[i].type == "select-one"
                    || item[i].type == "tel" || item[i].type == "search"
                    || item[i].type == "range" || item[i].type == "number"
                    || item[i].type == "month" || item[i].type == "email"
                    || item[i].type == "datetime-local"
                    || item[i].type == "datetime" || item[i].type == "date"
                    || item[i].type == "color") {
                    obj[item[i].name] = item[i].value;
                } else if (item[i].type == "checkbox") {
                    var stamp = true;
                    if (item[i].checked) {
                        for (var n in obj) {
                            if (n == item[i].name) {
                                obj[n].push(item[i].value);
                                stamp = false;
                                break;
                            }
                        }
                        if (stamp) {
                            obj[item[i].name] = [item[i].value];
                        }
                    }
                } else if (item[i].type == "radio") {
                    if (item[i].checked) {
                        obj[item[i].name] = item[i].value;
                    }
                }
            }
            var textItem = form.getElementsByTagName('textarea');
            if (textItem != undefined && textItem != null) {
                for (var i = 0; i < textItem.length; i++) {
                    obj[textItem[i].name] = textItem[i].value;
                }
            }
            var selectItem = form.getElementsByTagName('select');
            if (selectItem != undefined && selectItem != null) {
                for (var i = 0; i < selectItem.length; i++) {
                    obj[selectItem[i].name] = selectItem[i].value;
                }
            }
            return obj;
        },
    };

    ;
    (function() {
        var getSibling = function(e, n) {
            var brother = e.nextElementSibling; // 获取下一个兄弟元素
            if (brother == undefined || brother == null) {
                return null;
            }
            if (getIsNull(brother, n)) {
                return brother;
            }
            var son = getSon(brother, n);
            if (son != null) {
                return son;
            }
            return getSibling(brother, n);
        }
        var getIsNull = function(e, n) {
            if (e.className != undefined && e.className != null) {
                if (e.className.indexOf(n) >= 0) {
                    return true;
                }
            }
            return false;
        }
        var getSon = function(e, n) {
            var son = e.firstElementChild;
            if (son == undefined || son == null) {
                return null;
            } else {
                if (getIsNull(son, n)) {
                    return son;
                }
            }
            var brother = getSibling(son, n);
            if (brother != null) {
                return brother;
            }
            return getSon(son, n)
        }

        /**
         * 在兄弟元素或者兄弟元素的子元素中寻找指定className的元素
         *
         * @param e
         *            [Element]DOM对象
         * @param n
         *            className
         */
        var getBrotherOrSon = function(e, n) {
            var son = getSon(e, n);
            if (son != null) {
                return son;
            }
            return getSibling(e, n);
        }
        _$Config.fns.add('getBrotherOrSon', getBrotherOrSon);
    })();

    _$Config.upload = {
        data: null,
        formState: true,
        close: function() {
            var box = document.getElementById('uploadDialog');
            if (box != undefined && box != null) {
                box.parentNode.removeChild(box);
            }
        },
        dialog: function(callback) {
            _$Config.upload.close();
            var dialog = document.createElement('div');
            dialog.id = 'uploadDialog';
            dialog.className = 'upload-dialog';
            var background = document.createElement('div');
            background.className = 'u-d-background';
            dialog.appendChild(background);
            var wrap = document.createElement('div');
            wrap.className = 'u-d-wrap';
            background.appendChild(wrap);
            var form = document.createElement('form');
            form.innerHTML = "<img id='_u_d_image' src=''>";
            var closeBox = document.createElement('i');
            closeBox.className = 'close';
            var close = document.createElement('i');
            _$Config.bindEvent.add(closeBox, 'onclick', function() {
                dialog.parentNode.removeChild(dialog);
            });
            var closeBar = document.createElement('div');
            closeBar.className = 'close-bar';
            closeBar.innerHTML = "图片上传";
            closeBox.appendChild(close);
            closeBar.appendChild(closeBox);
            wrap.appendChild(closeBar);
            wrap.appendChild(form);
            var input = document.createElement('input');
            input.type = 'file';
            input.name = 'file';
            var button = document.createElement('button');
            button.type = 'button';
            button.innerHTML = '上传';
            form.appendChild(input);
            form.appendChild(button);
            document.body.appendChild(dialog);
            _$Config.bindEvent.add(input, 'onchange', function() {
                var file = this.files[0];
                if ((file.type).indexOf("image/") <= -1) {
                    _$Config.dialog.init({
                        content: '你选择的文件不是图片哦~',
                        time: 5000,
                    });
                    return;
                }
                var base64 = new FileReader();
                base64.readAsDataURL(file);
                base64.onload = function() {
                    document.getElementById('_u_d_image').src = base64.result;
                };
            })
            //https://www.server-file.com/file-server/files/jpg/1579505643753-802e690657ec4ebf8953c482a1649042.jpg
            /**
             * 上传图片
             */
            _$Config.bindEvent.add(button, 'onclick', function() {
                var file = input.files[0];
                if (file == undefined || file == null || file == '') {
                    _$Config.dialog.init({
                        content: '请先选择图片再上传！',
                        time: 5000,
                    });
                    return;
                }
                if ((file.type).indexOf("image/") <= -1) {
                    _$Config.dialog.init({
                        content: '你选择的文件不是图片哦~',
                        time: 5000,
                    });
                    return;
                } else {
                    if (input.value != undefined && input.value != null && input.value != '') {
                        var formdata = new FormData(form);
                        if (_$Config.upload.formState) {
                            _$Config.upload.formState = false;
                            var waitClose = _$Config.dialog.wait('图片上传中···');
                            $.ajax({
                                type: "post",
                                url: "https://www.server-file.com/file/server/upload",
                                data: formdata,
                                dataType: "json",
                                contentType: false,
                                processData: false,
                                success: function(reply) {
                                    _$Config.upload.formState = true;
                                    waitClose();
                                    if (reply.state == 'success') {
                                        _$Config.upload.data = reply;
                                        if (callback != undefined && callback != null && _$Config.fns.isFunction(callback)) {
                                            callback(reply);
                                        }
                                        _$Config.upload.close();
                                    }
                                    _$Config.dialog.open(reply.message, 5000);
                                },
                                error: function() {
                                    _$Config.upload.formState = true;
                                    waitClose();
                                    $C.dialog.open();
                                }
                            });
                        }
                    } else {
                        _$Config.dialog.open("请先选择图片！", 5000);
                    }
                }
            });
        },
    }

    var dialogdata = {
        content: null,
        newWindow: false,
        time: 0,
        callback: null,
        confirmMethod: null,
        closeMethod: null,
    }

    _$Config.dialog = {

        /**
         * 初始化，并弹出对话框
         *
         * @param data 初始化参数
         * data = {
         *          content: null, // 对话框内容
         *          time: 0,    // 对话框自动关闭时间
         *          callback: null, // 回调函数，可以绑定一些需要执行的函数。参数为当前对话框的DOM对象
         *          confirmMethod: null, // 点击确定时执行的函数。参数为当前对话框的DOM对象
         *          closeMethod: null, // 点击取消时执行的函数。参数为当前对话框的DOM对象
         *        }
         *
         */
        init: function(data) {
            var allbox = document.getElementsByClassName('dialog-wrap');
            var boxid = '';
            if (allbox != undefined && allbox != null && allbox.length > 0) {
                boxid = 'dialog' + allbox.length + 1;
            } else {
                boxid = 'dialog';
            }

            // 初始化对话框DOM对象
            var dialog = document.createElement('div');
            dialog.id = boxid;
            dialog.className = 'dialog-wrap';

            var dialogBox = document.createElement('div');
            dialogBox.className = 'dialog-box';

            var closeBox = document.createElement('div');
            closeBox.className = 'dialog-close';
            var close = document.createElement('i');
            close.className = 'close';
            close.innerHTML = "<i></i>";
            closeBox.appendChild(close);
            dialogBox.appendChild(closeBox);

            var contentBox = document.createElement('div');
            contentBox.className = 'dialog-content';
            if (data.content == undefined) {
                contentBox.innerHTML = '网络故障！';
            } else if (data.content == null) {
                contentBox.innerHTML = '出现了未知错误！请稍后再试！！';
            } else {
                contentBox.innerHTML = data.content;
            }
            dialogBox.appendChild(contentBox);

            var buttonBox = document.createElement('div');
            buttonBox.className = 'dialog-button';
            var confirmButton = document.createElement('button');
            confirmButton.type = 'button';
            confirmButton.className = 'box-button yes';
            confirmButton.innerHTML = '确认';
            var closeButton = document.createElement('button');
            closeButton.type = 'button';
            closeButton.className = 'box-button no';
            closeButton.innerHTML = '取消';
            buttonBox.appendChild(confirmButton);
            buttonBox.appendChild(closeButton);
            dialogBox.appendChild(buttonBox);

            dialog.appendChild(dialogBox);
            document.body.appendChild(dialog);

            // 为对话框绑定event事件

            // 点击右上角的X图标关闭对话框
            _$Config.bindEvent.add(close, 'onclick', function() {
                _$Config.dialog.close(boxid);
            });

            // 点击确定关闭对话框,并执行绑定的函数
            _$Config.bindEvent.add(confirmButton, 'onclick', function() {
                // 如果传入了需要执行的函数则继续执行绑定的函数
                if (data.confirmMethod != undefined && data.confirmMethod != null && _$Config.fns.isFunction(data.confirmMethod)) {
                    data.confirmMethod(dialog);
                }
                // 关闭对话框
                _$Config.dialog.close(boxid);
            });

            // 点击取消关闭对话框,并执行绑定的函数
            _$Config.bindEvent.add(closeButton, 'onclick', function() {
                // 如果传入了需要执行的函数则继续执行绑定的函数
                if (data.closeMethod != undefined && data.closeMethod != null && _$Config.fns.isFunction(data.closeMethod)) {
                    data.closeMethod(dialog);
                }
                // 关闭对话框
                _$Config.dialog.close(boxid);
            });

            // 绑定回调函数
            if (data.callback != undefined && data.callback != null && _$Config.fns.isFunction(data.callback)) {
                data.callback(dialog);
            }

            // 设置自动关闭对话框的函数，如果没有设置，对话框则一直存在
            if (data.time != undefined && data.time != null && data.time > 0) {
                setTimeout(function() {
                    _$Config.dialog.close(boxid);
                }, data.time);
            }

        },

        /**
         * 弹出对话框
         * @param content 对话框内容
         * @param callback 回调函数
         * @param time 自动关闭时间
         */
        open: function(content, time) {
            // 初始化，并弹出对话框
            _$Config.dialog.init({
                content: content,
                time: time,
                callback: null,
                confirmMethod: null,
                closeMethod: null,
            });
        },

        /**
         * 关闭对话框
         *
         * @param method
         *            关闭对话框时运行的函数
         */
        close: function(id) {
            var div = document.getElementById(id);
            if (div != undefined && div != null) {
                div.parentNode.removeChild(div);
            }
        },

        /**
         * 弹出等待层，防止用户在客户端请求服务器时进行某些操作。例如上传文件时弹出此模块，防止用户干扰上传过程。
         * @returns {function(...[*]=)} // 返回了一个无参数的回调函数，用于关闭此模块，可以将此回调函数放入上传文件的回调函数中，文件上传结束时调用，关闭此模块。
         */
        wait: function(content) {
            var text = '';
            if (content != undefined && content != null) {
                text = content;
            }
            var wrap = document.createElement("div");
            wrap.className = 'dialog-wrap';
            wrap.innerHTML = "<div class='dialog-wait'><i class='wait-circle'></i><div class='wait-text'>" + text + "</div></div>";
            document.body.appendChild(wrap);
            return function() {
                wrap.parentNode.removeChild(wrap);
            }
        }
    };

    /**
     * 为元素添加或者移除event事件
     *
     * @param e
     *            [Element]需要添加事件的DOM元素
     * @param type
     *            需要添加的事件类型,例如: onclick
     * @param fn
     *            触发事件时执行的方法
     * @param isBubble
     *            规定事件流
     */
    _$Config.bindEvent = {
        add: function(e, type, fn, isBubble) {
            if (!isBubble)
                isBubble = false;
            if (e.addEventListenner) {
                e.addEventListenner(type, fn, isBubble);
            } else if (e.attachEvent) {
                Transit = function() {
                    fn.call(e);
                }
                e.attachEvent(type, Transit);
            } else {
                e[type] = fn;
            }
        },
        remove: function(e, type, fn, isBubble) {
            if (!isBubble)
                isBubble = false;
            if (e.removeEventListenner) {
                e.removeEventListenner(type, fn, isBubble)
            } else if (e.detachEvent) {
                e.detachEvent(type, Transit)
            } else {
                e[type] = null;
            }
        }
    };

    _$Config.Mail = {

        /**
         * 请求服务器发送邮件<br>
         * data.url URL地址 data.email 收件人邮箱 data.success 请求服务器成功 data.error
         * 请求服务器失败
         */
        sendEmail: function(data) {
            $.ajax({
                type: 'post',
                url: data.url,
                data: data.email,
                dataType: 'json',
                contentType: 'application/json;charset=UTF-8',
                success: function(reply) {
                    data.success(reply);
                },
                error: function() {
                    _$Config.dialog.open();
                    if (data.error != undefined && data.error != null) {
                        data.error();
                    }
                }
            });
        }
    };

    _$Config.date = {
        weekNumber: ['日', '一', '二', '三', '四', '五', '六'],
        getDate: function() {
            var dt = new Date();
            var year = dt.getFullYear();
            var month = dt.getMonth() + 1;
            var day = dt.getDate();
            var hh = dt.getHours();
            hh = hh < 10 ? '0' + hh : hh;
            var mm = dt.getMinutes();
            mm = mm < 10 ? '0' + mm : mm;
            var ss = dt.getSeconds();
            ss = ss < 10 ? '0' + ss : ss;
            var week = dt.getDay();
            return {
                year: {
                    k: '年',
                    v: year
                },
                month: {
                    k: '月',
                    v: month
                },
                day: {
                    k: '日',
                    v: day
                },
                hour: {
                    k: '时',
                    v: hh
                },
                minutes: {
                    k: '分',
                    v: mm
                },
                seconds: {
                    k: '秒',
                    v: ss
                },
                week: {
                    k: '星期',
                    v: _$Config.date.weekNumber[week]
                },
            };
        }
    };

    // 获取屏幕宽度
    _$Config.getScreenWidth = function() {
        var w1 = d.body.clientWidth;
        var w2 = d.body.offsetWidth;
        var w3 = d.body.scrollWidth;
        var w4 = w.screen.width;
        var w5 = w.screen.availWidth;
        return _$Config.getMaxValue(w1, _$Config.getMaxValue(w2, _$Config.getMaxValue(w3,
            _$Config.getMaxValue(w4, w5))));
    };

    // 获取屏幕高度
    _$Config.getScreenHeight = function() {
        var h1 = d.body.clientHeight;
        var h2 = d.body.offsetHeight;
        var h3 = d.body.scrollHeight;
        var h4 = w.screen.Height;
        var h5 = w.screen.availHeight;
        return _$Config.getMaxValue(h1, _$Config.getMaxValue(h2, _$Config.getMaxValue(h3,
            _$Config.getMaxValue(h4, h5))));
    };

    // 返回两个数中较大的值
    _$Config.getMaxValue = function(v1, v2) {
        return v1 >= v2 ? v1 : v2;
    };

    _$Config.d = d;
    _$Config.w = w;
    w.$C = _$Config;

})(window, document);